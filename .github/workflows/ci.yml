name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        uv venv
        source .venv/bin/activate || .venv\Scripts\activate
        uv pip install -e ".[dev]"
        
    - name: Install MLX (macOS only)
      if: matrix.os == 'macos-latest'
      run: |
        source .venv/bin/activate
        uv pip install mlx mlx-lm
        
    - name: Lint with flake8
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Format check with black
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        black --check src tests
        
    - name: Import sort check with isort
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        isort --check-only src tests
        
    - name: Type check with mypy
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        mypy src --ignore-missing-imports
        
    - name: Test with pytest
      run: |
        source .venv/bin/activate || .venv\Scripts\activate
        pytest tests/ -v --cov=open_logistics --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        
    - name: Dependency vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t open-logistics:latest .
        
    - name: Test Docker image
      run: |
        docker run --rm open-logistics:latest openlogistics version
